import csv
import os
from cryptography.fernet import Fernet

# ---------- CONFIG ----------
# This is the encryption key file.
# It stores the secret Fernet key generated by Fernet.generate_key().
# The key is what allows your program to encrypt and decrypt passwords.
# It must always stay the same â€” if deleted or changed, old passwords canâ€™t be decrypted.
KEY_FILE = "secret.key"

# This is the password storage file.
# It stores all your saved passwords in encrypted form, using the key from secret.key.
PASSWORD_FILE = "passwords.csv"

# ---------- KEY HANDLING ----------


def load_or_create_key():
    # Load an existing key from file, or create a new one if missing.

    # This checks if the key file (secret.key) already exists in your folder.
    # If the file exists, that means youâ€™ve already created a key before.
    # If it does not exist, you need to make a new one.
    if os.path.exists(KEY_FILE):
        # If the file exists, open it in binary read mode ("rb").
        # We use binary mode because the encryption key is binary data, not text.
        with open(KEY_FILE, "rb") as key_file:
            # reads the entire key from the file into memory.
            key = key_file.read()
            print("[INFO] Encryption key loaded.")
    else:
        # This line creates a brand-new random encryption key (a 32-byte secure token).
        # This key will be used to encrypt and decrypt your passwords.
        key = Fernet.generate_key()

        # Opens a new file called secret.key in binary write mode ("wb").
        # Saves the key to the file so that next time, it can be reused.
        with open(KEY_FILE, "wb") as key_file:
            key_file.write(key)
        print("[INFO] New encryption key created.")
    return key


# Load the key and initialize Fernet cipher
key = load_or_create_key()
cipher_suite = Fernet(key)

# ---------- PASSWORD ENCRYPTION ----------


def encrypt_password(password):
    # Encrypt plain-text password into bytes,
    return cipher_suite.encrypt(password.encode())


def decrypt_password(encrypted_password):
    # Decrypt password bytes (or string from CSV).
    if isinstance(encrypted_password, str):
        encrypted_password = encrypted_password.encode()
    return cipher_suite.decrypt(encrypted_password).decode()


# ---------- PASSWORD STORAGE ----------
passwords = []

# Load existing passwords (if file exists)
if os.path.exists(PASSWORD_FILE):
    with open(PASSWORD_FILE, mode="r", newline="", encoding="utf-8") as file:
        reader = csv.reader(file)
        for row in reader:
            if len(row) == 3:
                passwords.append({
                    "website": row[0],
                    "username": row[1],
                    "password": row[2]
                })
    print(f"[INFO] Loaded {len(passwords)} saved password(s).")
else:
    open(PASSWORD_FILE, "w", encoding="utf-8").close()
    print("[INFO] Created new passwords.csv file.")


# ---------- FUNCTIONS ----------
def add_password():
    website = input("Website: ")
    username = input("Username: ")
    password = input("Password: ")

    encrypted_password = encrypt_password(password)

    passwords.append({
        "website": website,
        "username": username,
        "password": encrypted_password.decode()
    })

    with open(PASSWORD_FILE, mode="a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([website, username, encrypted_password.decode()])

    print(f"[+] Password for '{website}' saved.")


def get_password(website):
    for entry in passwords:
        if entry["website"].lower() == website.lower():
            decrypted = decrypt_password(entry["password"])
            print(f"\nðŸ”‘ Website: {website}")
            print(f"ðŸ‘¤ Username: {entry['username']}")
            print(f"ðŸ”’ Password: {decrypted}\n")
            return
    print("[!] Website not found.")


# ---------- MAIN MENU ----------
while True:
    print("\n====== Password Manager ======")
    print("1. Add Password")
    print("2. Get Password")
    print("3. Exit")
    choice = input("Enter your choice: ").strip()

    if choice == '1':
        add_password()
    elif choice == '2':
        site = input("Enter website name: ")
        get_password(site)
    elif choice == '3':
        print("Goodbye ðŸ‘‹")
        break
    else:
        print("Invalid choice. Try again.")
